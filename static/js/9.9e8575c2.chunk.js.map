{"version":3,"sources":["assets/fonts/gotham-bold.woff2","components/Heading/index.js","components/Text/index.js","components/Section/index.js","components/DecoderText/index.js","components/Divider/index.js","components/Input/TextArea.js","components/Input/index.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","pages/Contact/index.js"],"names":["Heading","children","level","as","align","weight","className","rest","clampedLevel","Math","min","max","Component","Helmet","rel","href","GothamBold","crossorigin","classNames","Text","size","secondary","Section","forwardRef","ref","glyphs","CharType","DecoderText","text","start","delay","startDelay","output","useRef","type","value","container","reduceMotion","usePrefersReducedMotion","useEffect","containerInstance","current","content","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","floor","random","length","shuffle","prerender","chain","spring","from","to","stiffness","damping","stop","aria-hidden","memo","Divider","lineWidth","lineHeight","notchWidth","notchHeight","collapseDelay","collapsed","style","numToMs","defaultProps","TextArea","resize","onChange","minRows","maxRows","rows","setRows","useState","textareaDimensions","setTextareaDimensions","textareaRef","getComputedStyle","parseInt","paddingHeight","paddingTop","paddingBottom","event","previousRows","target","currentRows","scrollHeight","scrollTop","Input","id","label","hasValue","multiline","error","onBlur","focused","setFocused","generatedId","useId","errorRef","inputId","labelId","errorId","InputElement","htmlFor","aria-labelledby","aria-describedby","undefined","onFocus","TransitionGroup","component","Transition","timeout","msToNum","tokens","base","durationM","status","role","isVisible","numToPx","getBoundingClientRect","height","Icon","icon","store","_origin","validateParams","userID","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","form","uID","_userID","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","initDelay","durationS","getDelay","delayMs","initDelayMs","multiplier","numDelay","toFixed","Contact","useRouteTransition","email","useFormInput","message","sending","setSending","complete","setComplete","statusError","setStatusError","useScrollRestore","sendEmail","e","preventDefault","emailjs","then","result","console","log","name","appear","mountOnEnter","unmountOnExit","onEnter","reflow","method","onSubmit","durationXS","required","autoComplete","maxLength","errorStatus","Button","disabled","loading","loadingText","aria-live","iconHoverShift"],"mappings":"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","file":"static/js/9.9e8575c2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gotham-bold.73ce573b.woff2\";","import { Fragment } from 'react';\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\nimport GothamBold from 'assets/fonts/gotham-bold.woff2';\nimport './index.css';\n\nconst Heading = ({\n  children,\n  level = 1,\n  as,\n  align = 'auto',\n  weight = 'medium',\n  className,\n  ...rest\n}) => {\n  const clampedLevel = Math.min(Math.max(level, 0), 4);\n  const Component = as || `h${Math.max(clampedLevel, 1)}`;\n\n  return (\n    <Fragment>\n      {/* Conditionally load the bold font weight because we use it less frequently */}\n      {weight === 'bold' && (\n        <Helmet>\n          <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\n          <style>\n            {`\n              @font-face {\n                font-family: 'Gotham';\n                font-weight: 700;\n                src: url(${GothamBold}) format('woff2');\n                font-display: swap;\n              }\n            `}\n          </style>\n        </Helmet>\n      )}\n      <Component\n        className={classNames(\n          className,\n          'heading',\n          `heading--align-${align}`,\n          `heading--level-${clampedLevel}`,\n          `heading--weight-${weight}`\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    </Fragment>\n  );\n};\n\nexport default Heading;\n","import classNames from 'classnames';\nimport './index.css';\n\nconst Text = ({\n  children,\n  size = 'm',\n  as: Component = 'p',\n  align = 'auto',\n  weight = 'auto',\n  secondary,\n  className,\n  ...rest\n}) => {\n  return (\n    <Component\n      className={classNames(\n        className,\n        'text',\n        `text--align-${align}`,\n        `text--size-${size}`,\n        `text--weight-${weight}`,\n        {\n          'text--secondary': secondary,\n        }\n      )}\n      {...rest}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport default Text;\n","import { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport './index.css';\n\nconst Section = forwardRef(\n  ({ as: Component = 'div', children, className, ...rest }, ref) => (\n    <Component className={classNames('section', className)} ref={ref} {...rest}>\n      {children}\n    </Component>\n  )\n);\n\nexport default Section;\n","import { useRef, useEffect, memo } from 'react';\nimport classNames from 'classnames';\nimport { usePrefersReducedMotion } from 'hooks';\nimport { spring, chain, delay, value } from 'popmotion';\nimport VisuallyHidden from 'components/VisuallyHidden';\nimport prerender from 'utils/prerender';\nimport './index.css';\n\n// prettier-ignore\nconst glyphs = [\n'0', '0', '1', '0', '1', '0', '1','1',\n'0', '0', '1', '0', '1', '0', '1','1',\n'0', '0', '1', '0', '1', '0', '1','1',\n'0', '0', '1', '0', '1', '0', '1','1',\n'0', '0', '1', '0', '1', '0', '1','1',\n'0', '0', '1', '0', '1', '0', '1','1',\n'0', '0', '1', '0', '1', '0', '1','1',  \n];\n\nconst CharType = {\n  Glyph: 'glyph',\n  Value: 'value',\n};\n\nfunction shuffle(content, output, position) {\n  return content.map((value, index) => {\n    if (index < position) {\n      return { type: CharType.Value, value };\n    }\n\n    if (position % 1 < 0.5) {\n      const rand = Math.floor(Math.random() * glyphs.length);\n      return { type: CharType.Glyph, value: glyphs[rand] };\n    }\n\n    return { type: CharType.Glyph, value: output[index].value };\n  });\n}\n\nconst DecoderText = ({\n  text,\n  start = true,\n  delay: startDelay = 0,\n  className,\n  ...rest\n}) => {\n  const output = useRef([{ type: CharType.Glyph, value: '' }]);\n  const container = useRef();\n  const reduceMotion = usePrefersReducedMotion();\n\n  useEffect(() => {\n    const containerInstance = container.current;\n    const content = text.split('');\n    let animation;\n\n    const renderOutput = () => {\n      const characterMap = output.current.map(item => {\n        return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`;\n      });\n\n      containerInstance.innerHTML = characterMap.join('');\n    };\n\n    const springValue = value(0, position => {\n      output.current = shuffle(content, output.current, position);\n      renderOutput();\n    });\n\n    if (start && !animation && !reduceMotion && !prerender) {\n      animation = chain(\n        delay(startDelay),\n        spring({\n          from: 0,\n          to: content.length,\n          stiffness: 8,\n          damping: 5,\n        })\n      ).start(springValue);\n    }\n\n    if (reduceMotion) {\n      output.current = content.map((value, index) => ({\n        type: CharType.Value,\n        value: content[index],\n      }));\n      renderOutput();\n    }\n\n    return () => {\n      if (animation) {\n        animation.stop();\n      }\n    };\n  }, [reduceMotion, start, startDelay, text]);\n\n  return (\n    <span className={classNames('decoder-text', className)} {...rest}>\n      <VisuallyHidden className=\"decoder-text__label\">{text}</VisuallyHidden>\n      <span aria-hidden className=\"decoder-text__content\" ref={container} />\n    </span>\n  );\n};\n\nexport default memo(DecoderText);\n","import classNames from 'classnames';\nimport { numToMs } from 'utils/style';\nimport './index.css';\n\nconst Divider = ({\n  lineWidth,\n  lineHeight,\n  notchWidth,\n  notchHeight,\n  collapseDelay,\n  collapsed,\n  className,\n  style,\n}) => (\n  <div\n    className={classNames('divider', className)}\n    style={{\n      '--lineWidth': lineWidth,\n      '--lineHeight': lineHeight,\n      '--notchWidth': notchWidth,\n      '--notchHeight': notchHeight,\n      '--collapseDelay': numToMs(collapseDelay),\n      ...style,\n    }}\n  >\n    <div\n      className={classNames('divider__line', { 'divider__line--collapsed': collapsed })}\n    />\n    <div\n      className={classNames('divider__notch', { 'divider__notch--collapsed': collapsed })}\n      style={{ '--collapseDelay': numToMs(collapseDelay + 160) }}\n    />\n  </div>\n);\n\nDivider.defaultProps = {\n  lineWidth: '100%',\n  lineHeight: '2px',\n  notchWidth: '100%',\n  notchHeight: '2px',\n  collapsed: false,\n  collapseDelay: 0,\n};\n\nexport default Divider;\n","import { useRef, useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport './TextArea.css';\n\nconst TextArea = ({\n  className,\n  resize = 'none',\n  value,\n  onChange,\n  minRows = 1,\n  maxRows,\n  ...rest\n}) => {\n  const [rows, setRows] = useState(minRows);\n  const [textareaDimensions, setTextareaDimensions] = useState();\n  const textareaRef = useRef();\n\n  useEffect(() => {\n    const style = getComputedStyle(textareaRef.current);\n    const lineHeight = parseInt(style.lineHeight, 10);\n    const paddingHeight =\n      parseInt(style.paddingTop, 10) + parseInt(style.paddingBottom, 10);\n    setTextareaDimensions({ lineHeight, paddingHeight });\n  }, []);\n\n  const handleChange = event => {\n    onChange(event);\n\n    const { lineHeight, paddingHeight } = textareaDimensions;\n    const previousRows = event.target.rows;\n    event.target.rows = minRows;\n\n    const currentRows = ~~((event.target.scrollHeight - paddingHeight) / lineHeight);\n\n    if (currentRows === previousRows) {\n      event.target.rows = currentRows;\n    }\n\n    if (maxRows && currentRows >= maxRows) {\n      event.target.rows = maxRows;\n      event.target.scrollTop = event.target.scrollHeight;\n    }\n\n    setRows(maxRows && currentRows > maxRows ? maxRows : currentRows);\n  };\n\n  return (\n    <textarea\n      className={classNames('textarea', className)}\n      ref={textareaRef}\n      onChange={handleChange}\n      style={{ '--resize': resize }}\n      rows={rows}\n      value={value}\n      {...rest}\n    />\n  );\n};\n\nexport default TextArea;\n","import { useState, useRef } from 'react';\nimport classNames from 'classnames';\nimport { TransitionGroup, Transition } from 'react-transition-group';\nimport TextArea from './TextArea';\nimport { useId } from 'hooks';\nimport { isVisible } from 'utils/transition';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport { msToNum, numToPx } from 'utils/style';\nimport Icon from 'components/Icon';\nimport './index.css';\n\nconst Input = ({\n  id,\n  label,\n  hasValue,\n  value,\n  multiline,\n  className,\n  style,\n  error,\n  onBlur,\n  ...rest\n}) => {\n  const [focused, setFocused] = useState(false);\n  const generatedId = useId();\n  const errorRef = useRef();\n  const inputId = id || `input-${generatedId}`;\n  const labelId = `${inputId}-label`;\n  const errorId = `${inputId}-error`;\n  const InputElement = multiline ? TextArea : 'input';\n\n  const handleBlur = event => {\n    setFocused(false);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  return (\n    <div\n      className={classNames('input', className, { 'input--error': !!error })}\n      style={style}\n    >\n      <div className=\"input__content\">\n        <label\n          className={classNames('input__label', {\n            'input__label--focused': focused,\n            'input__label--has-value': !!value,\n          })}\n          id={labelId}\n          htmlFor={inputId}\n        >\n          {label}\n        </label>\n        <InputElement\n          className=\"input__element\"\n          id={inputId}\n          aria-labelledby={labelId}\n          aria-describedby={!!error ? errorId : undefined}\n          onFocus={() => setFocused(true)}\n          onBlur={handleBlur}\n          value={value}\n          {...rest}\n        />\n        <div\n          className={classNames('input__underline', {\n            'input__underline--focused': focused,\n          })}\n        />\n      </div>\n      <TransitionGroup component={null}>\n        {!!error && (\n          <Transition timeout={msToNum(tokens.base.durationM)}>\n            {status => (\n              <div\n                className={classNames('input__error', `input__error--${status}`)}\n                id={errorId}\n                role=\"alert\"\n                style={{\n                  '--height': isVisible(status)\n                    ? numToPx(errorRef.current?.getBoundingClientRect().height)\n                    : '0px',\n                }}\n              >\n                <div className=\"input__error-message\" ref={errorRef}>\n                  <Icon icon=\"error\" />\n                  {error}\n                </div>\n              </div>\n            )}\n          </Transition>\n        )}\n      </TransitionGroup>\n    </div>\n  );\n};\n\nexport default Input;\n","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, userID) => {\n    const uID = userID || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.5.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import './index.css';\n\nimport classNames from 'classnames';\nimport { Button } from 'components/Button';\nimport DecoderText from 'components/DecoderText';\nimport Divider from 'components/Divider';\nimport Heading from 'components/Heading';\nimport Icon from 'components/Icon';\nimport Input from 'components/Input';\nimport Section from 'components/Section';\nimport Text from 'components/Text';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport { useFormInput, useRouteTransition, useScrollRestore } from 'hooks';\nimport { useRef, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Transition, TransitionGroup } from 'react-transition-group';\nimport prerender from 'utils/prerender';\nimport { msToNum, numToMs, numToPx } from 'utils/style';\nimport { isVisible, reflow } from 'utils/transition';\nimport emailjs from '@emailjs/browser';\n\nconst initDelay = tokens.base.durationS;\n/*\nfunction getStatusError({\n  status,\n  errorMessage,\n  fallback = 'There was a problem with your request',\n}) {\n  if (status === 200) return false;\n\n  const statuses = {\n    500: 'There was a problem with the server, try again later',\n    404: 'There was a problem connecting to the server. Make sure you are connected to the internet',\n  };\n\n  if (errorMessage) {\n    return errorMessage;\n  }\n\n  return statuses[status] || fallback;\n} */\n\nfunction getDelay(delayMs, initDelayMs = numToMs(0), multiplier = 1) {\n  const numDelay = msToNum(delayMs) * multiplier;\n  return { '--delay': numToMs((msToNum(initDelayMs) + numDelay).toFixed(0)) };\n}\n\nconst Contact = () => {\n  const { status } = useRouteTransition();\n  const errorRef = useRef();\n  const email = useFormInput('');\n  const message = useFormInput('');\n  const [sending, setSending] = useState(false);\n  const [complete, setComplete] = useState(false);\n  const [statusError, setStatusError] = useState('');\n  useScrollRestore();\n\n  const form = useRef();\n\n  const sendEmail = e => {\n    e.preventDefault();\n    setStatusError('');\n\n    emailjs\n      .sendForm('service_a8jy3ns', 'template_5ij580e', form.current, 'BUFGWabiq1jW1WTgv')\n      .then(\n        result => {\n          console.log(result.text);\n          setSending(true);\n          setComplete(true);\n        },\n        error => {\n          console.log(error.text);\n          setStatusError(error.text);\n        }\n      );\n  };\n\n  /* const onSubmit = useCallback(\n    async event => {\n      event.preventDefault();\n      setStatusError('');\n\n      if (sending) return;\n\n      try {\n        setSending(true);\n\n        const response = await fetch('https://api.hamishw.com/message', {\n          method: 'POST',\n          mode: 'cors',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            email: email.value,\n            message: message.value,\n          }),\n        });\n\n        const responseMessage = await response.json();\n\n        const statusError = getStatusError({\n          status: response?.status,\n          errorMessage: responseMessage?.error,\n          fallback: 'There was a problem sending your message',\n        });\n\n        if (statusError) throw new Error(statusError);\n\n        setComplete(true);\n        setSending(false);\n      } catch (error) {\n        setSending(false);\n        setStatusError(error.message);\n      }\n    },\n    [email.value, message.value, sending]\n  );*/\n\n  return (\n    <Section className={classNames('contact', `contact--${status}`)}>\n      <Helmet>\n        <title>Contact | Edgar Rincon</title>\n        <meta\n          name=\"description\"\n          content=\"Send me a message if you’re interested in discussing a project or if you just want to say hi\"\n        />\n      </Helmet>\n      <TransitionGroup component={null}>\n        {!complete && (\n          <Transition appear mountOnEnter unmountOnExit timeout={1600} onEnter={reflow}>\n            {status => (\n              <form\n                className=\"contact__form\"\n                method=\"post\"\n                onSubmit={sendEmail}\n                ref={form}\n              >\n                <Heading\n                  className={classNames('contact__title', `contact__title--${status}`, {\n                    'contact__title--hidden': prerender,\n                  })}\n                  level={3}\n                  as=\"h1\"\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.3)}\n                >\n                  <DecoderText\n                    text=\"Say hello\"\n                    start={status !== 'exited' && !prerender}\n                    delay={300}\n                  />\n                </Heading>\n                <Divider\n                  className={classNames(\n                    'contact__divider',\n                    `contact__divider--${status}`,\n                    { 'contact__divider--hidden': prerender }\n                  )}\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.4)}\n                />\n                <Input\n                  required\n                  className={classNames('contact__input', `contact__input--${status}`, {\n                    'contact__input--hidden': prerender,\n                  })}\n                  style={getDelay(tokens.base.durationXS, initDelay)}\n                  autoComplete=\"email\"\n                  label=\"Your Email\"\n                  type=\"email\"\n                  maxLength={512}\n                  name=\"user_email\"\n                  {...email}\n                />\n                <Input\n                  required\n                  multiline\n                  className={classNames('contact__input', `contact__input--${status}`, {\n                    'contact__input--hidden': prerender,\n                  })}\n                  style={getDelay(tokens.base.durationS, initDelay)}\n                  autoComplete=\"off\"\n                  label=\"Message\"\n                  maxLength={4096}\n                  name=\"message\"\n                  {...message}\n                />\n                <TransitionGroup component={null}>\n                  {!!statusError && (\n                    <Transition timeout={msToNum(tokens.base.durationM)}>\n                      {errorStatus => (\n                        <div\n                          className={classNames(\n                            'contact__form-error',\n                            `contact__form-error--${errorStatus}`\n                          )}\n                          style={{\n                            '--height': isVisible(errorStatus)\n                              ? numToPx(errorRef.current?.getBoundingClientRect().height)\n                              : '0px',\n                          }}\n                        >\n                          <div className=\"contact__form-error-content\" ref={errorRef}>\n                            <div className=\"contact__form-error-message\">\n                              <Icon className=\"contact__form-error-icon\" icon=\"error\" />\n                              {statusError}\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </Transition>\n                  )}\n                </TransitionGroup>\n                <Button\n                  className={classNames('contact__button', `contact__button--${status}`, {\n                    'contact__button--hidden': prerender,\n                    'contact__button--sending': sending,\n                  })}\n                  style={getDelay(tokens.base.durationM, initDelay)}\n                  disabled={sending}\n                  loading={sending}\n                  loadingText=\"Sending...\"\n                  icon=\"send\"\n                  type=\"submit\"\n                >\n                  Send Message\n                </Button>\n              </form>\n            )}\n          </Transition>\n        )}\n        {complete && (\n          <Transition appear mountOnEnter unmountOnExit onEnter={reflow} timeout={0}>\n            {status => (\n              <div className=\"contact__complete\" aria-live=\"polite\">\n                <Heading\n                  level={3}\n                  as=\"h3\"\n                  className={classNames(\n                    'contact__complete-title',\n                    `contact__complete-title--${status}`\n                  )}\n                >\n                  Message Sent\n                </Heading>\n                <Text\n                  size=\"l\"\n                  className={classNames(\n                    'contact__complete-text',\n                    `contact__complete-text--${status}`\n                  )}\n                  style={getDelay(tokens.base.durationXS)}\n                >\n                  I’ll get back to you within a couple days, sit tight\n                </Text>\n                <Button\n                  secondary\n                  iconHoverShift\n                  className={classNames(\n                    'contact__complete-button',\n                    `contact__complete-button--${status}`\n                  )}\n                  style={getDelay(tokens.base.durationM)}\n                  href=\"/\"\n                  icon=\"chevronRight\"\n                >\n                  Back to homepage\n                </Button>\n              </div>\n            )}\n          </Transition>\n        )}\n      </TransitionGroup>\n    </Section>\n  );\n};\n\nexport default Contact;\n"],"sourceRoot":""}